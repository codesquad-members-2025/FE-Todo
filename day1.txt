- git에 관련된 공부

1. 깃허브에서 클론
    - 깃허브에서 클론 주소를 복사한뒤 터미널에서 원하는 디렉토리로 가서 클론 명령을 내린다.
    - ex. >>git clone git@github.com:y-minion/FE-Todo.git
    - 주의! 깃 작업은 하나의 상위 폴더에 깃 폴더를 생성한뒤 다시 자식 폴더 안에 다른 깃을 클론하면 에러가 발생한다.
    가급적 동등한 폴더 위치에 깃을 생성해야한다.

2. 깃에서의 워킹디렉토리, 스테이지, 리포지토리
    - 깃에서는 크게 3가지의 작업 공간이 있다.
        워킹디렉토리-> 로컬에서 작업한 모든 파일이 존재하는 공간.
        스테이지-> 워킹디렉토리에서 작업자가 원하는 파일을 커밋하고 싶을때 올리는 공간. 여기에서 선택적으로 커밋할 준비를 할 수 있다.
        리포지토리-> 스테이지에 있는 작업 파일을 커밋하는 공간. 여기에 있는 작업파일들을 원격 저장소에 push한다.

3. 작업이 완료된 후 스테이지에 올리는 단계로
    - 워킹디렉토리에서 원하는 파일을 커밋하고 싶으면 먼저 스테이지에 올려야한다. 스테이지에 올리는 방법은 다음과 같다.
    - ex. >> git add "파일명(확장자 포함)" || git add . (-> . 명령어는 폴더내에 있는 모든 파일을 스테이지에 올려준다.)

4. 스테이지에서 리포지토리로 커밋
    - 이제 스테이지에 올린 파일들을 리포지토리에 커밋할 단계다. 리포지토리에 있는 파일들은 깃허브(원격저장소)로 푸쉬할 수 있다.
    - ex. >>git commit -m "커밋 내용"
    - ex. >>git commit -am "커밋 내용" -> 이 방법은 기존에 최초로 한번 스테이지에 파일을 올렸으면 추가로 다시 add할 필요없이 바로 커밋 할 수 있다.

5. git의 브랜치
    - 작업을 하다 보면 기존의 작업 내용에서 추가로 각각 다르게 작업을 해야할 떄가 있다. 이때 디렉토리를 복사해서 다른이름으로 저장하지 않고도 다르게 작업을 하고 쉽게 작업 내용을 병합할 수  있도록 도와주는 개념이 branch다.
    - 기존에 아무 브랜치를 생성 하지 않았다면 main브랜치 하나만 존재한다.
    - 이떄 git 에서는 브랜치를 생성,병합,특정 브랜치가 존재하는 커밋으로 이동 할 수 있다.

        5-1. 브랜치 생성
        - 처음에는 브랜치가 없기에 생성을 해줘야한다. 다음과 같이 생성할 수 있다.
        >> git branch 브랜치 이름
        - 브랜치가 생성되면 각각의 해당하는 커밋 해쉬값에서 다르게 작업을 할 수 있다. 사실 꼭 브랜치를 만들어야만 다른 커밋 단계로 돌아갈 수 있는건 아니다.
        커밋 해쉬값를 알아내면 그 시점으로 돌아가서 작업을 할 수도 있다. 하지만 브랜치가 있으면 브랜치의 이름만 적어줘도 커밋의 시점으로 이동할 수 있다.
        하지만 커밋의 주 목적은 이게 아니라 각기 다른 작업을 하고 병합하는데 목적이 있다.

        5-2. 브랜치 병합
        - 작업을 하다보면 브랜치 끼리 병합을 해야할 순간이 온다. 이때 병합하려는 파일이 같아도 가능하고, 달라도 가능하다. 하지만 "같은 파일의 같은 부분"을 병합하려고 하면 충돌이 발생한다.
        하지만 git은 충돌지점을 알려줘서 확인하고 수정하면 충돌을 해결 할 수 있다.
        - 충돌을 수정했으면 다시 머지할 필요없이 스테이지에 add를 해주면 된다.


6. 전의 커밋 해쉬값으로 돌아가는 방법(reset, revert)
    - 작업을 하다 보면 전의 작업 단계로 돌아가고 싶은 순간이 있다. 이때 사용하는 명령어는 reset과 revert가 있다.
    
    *reset (>> git reset --hard "돌아가고 싶은 커밋 해시값")
    -> reset은 이전 커밋을 되돌아가면서 기존의 커밋을 삭제하기 떄문에 팀프로젝트에서는 *위험*
    - reset의 옵션에는 세가지가 있다.
    - soft -> 커밋만 취소
    - mixed -> 커밋 취소 + 스테이지에 올라간 작업도 취소
    - hard -> 커밋취소 + 스테이지 작업 취소 + 변경사항 아예 삭제한다

    *revert(>>git revert "바로 전의 커밋 해시값")
    -> 이전 커밋으로 되돌아가는 *새로운 커밋을 생성*
    - 기존의 커밋을 삭제하지 않고 전의 커밋으로 되돌아 가기때문에 안전하다.
    - reset과 다르게 특정 커밋의 해시값으로 바로 되돌아 갈 수 없고 한 단계 전의 커밋으로 반복해서 되돌아가야한다.
    

7. git checkout "브랜치 || 커밋 해시값"
    - 커밋을 삭제하지 않고 단순히 특정 커밋으로 *이동*하는 명령어
    - 특정 커밋의 해시값이나 브랜치를 입력하면 해당하는 커밋으로 이동할 수 있다.